#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set board_type [lindex $argv 0]
send_log "\n#### board_type is $board_type\n"

if { $argc < 1} {
puts "Please input: board_type [buffer_status] ."
exit
}

if { $argc >= 2} {
set buffer_status [lindex $argv 1]
append TITLE " ($buffer_status)"
}

puts "\n##### TITLE $TITLE."

cd $uclinux_path/testsuites/ethernet/

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start testing."

set TransRate  0
set Throughput  0
set case_num 0

incr case_num

set timeout 8
send "ifconfig eth0 $targetip\r" 
while 1 {
   sleep 3
   expect {
      ">" {
         puts "ifconfig set success.\n"
         break
      }

      timeout {
            puts "Fail ifconfig. "
            break
         }
     }
}
spawn /bin/sh
expect sh_prompt
send -s "sudo ./netserver_x86 \r"
while 1 {
   expect {
      -re "\[Pp\]assword" {
         send -s "$password\r" 
         expect "Starting netserver"
         break
      }

      timeout {
            break
         }
     }
}

expect sh_prompt 
send -s  "ps aux| grep netserver_x86 | head -1 \r"
expect "\r"
while 1 {
   expect {
      "netserver" {
         break
      }

      timeout {
            break
         }
     }
}

expect sh_prompt
set netserver_id $spawn_id

set spawn_id $kermit_spawn_id

send "cd /\r"
expect    -re $kernel_prompt
send "chmod 777 netperf_script\r"

expect    -re $kernel_prompt
send  "./netperf_script\r"
set timeout 4000
while 1 {
   expect {
       -re $kernel_prompt {
         break
      }

      timeout {
            puts "Failed ethernet test."
            break
         }
     }
}

set spawn_id $netserver_id
set timeout 3
send -s "sudo pkill netserver_x86 \r"
while 1 {
   expect {
     -re "\[Pp\]assword" {
	send -s "$password\r" 
        expect sh_prompt
         break
      }

      timeout {
            break
         }
     }
}

set spawn_id $kermit_spawn_id

send  "cat netperf_tcp_rr\r"
set timeout 10
while 1 {
   expect {
      -re "600.* +(\[0-9]+\.\[0-9]+)" {   
         set TransRate $expect_out(1,string)
	 expect ">"
	 puts " TransRate $expect_out(1,string)"
         break
      }

      timeout {
           break
         }
     }
}

send  "cat netperf_tcp_stream\r"
set timeout 10
while 1 {
   expect {
     -re "600.* +(\[0-9]+\.\[0-9]+)" {   
         set Throughput $expect_out(1,string)
	 expect ">"
	 puts "Throughput $expect_out(1,string)"
         break
      }

      timeout {
           break
         }
     }
}

if { $board_type == "BF537-STAMP" } {

	if { $TransRate > 4000 && $Throughput > 85 } {
	
                case_pass $case_num
	
	} else {
                case_fail $case_num
		exit
	}
	
} elseif { $board_type == "BF533-STAMP" } {

	if { $TransRate > 4000 && $Throughput > 55 } {
	
                case_pass $case_num
	
	} else {
                case_fail $case_num
		exit
		
	}

}

spawn ftp $targetip 
while 1 {
    expect {
                "Name" { }
                timeout { send_user "Failed first return\n"
                        break }
        }
        send -s "root\r"
        expect {
                -re "\[Pp\]assword" { }
                timeout { send_user "Failed first return\n"
                        break }
        }
        send -s "uClinux\r"
        expect {
                "ftp>" { }
                timeout { send_user "Failed first return\n"
                        break }
        }

        send -s "cd /\r"
        expect {
                "ftp>" { }
                timeout { send_user "Failed first return\n"
                        break }
        }

        send -s "get netperf_tcp_rr\r"
        expect {
                "ftp>" { }
                timeout { send_user "Failed first return\n"
                        break }
        }
	
	send -s "get netperf_tcp_stream\r"
        expect {
                "ftp>" { }
                timeout { send_user "Failed first return\n"
                        break }
        }
         
	 send -s "bye\r"
	 expect {
                "Goodbye" { break }
                timeout { send_user "Failed first return\n"
                        break }
         }
	 
   }
   
send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file



