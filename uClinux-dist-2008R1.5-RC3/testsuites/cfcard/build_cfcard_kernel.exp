#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

step "Change config file in /vender folder."

cd $uclinux_path
sleep 3
 set timeout 2
      spawn ex vendors/AnalogDevices/$board_type/Makefile
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/BLOCKS\r"
      expect "BLOCKS*="
      send "d\r"
      expect ":"
      send "i\r"
      sleep .5
      send "BLOCKS = 16384\r"
      sleep .5
      send ".\r"
      expect ":"
      send "wq\r"
      expect eof


cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

send_log "\n\n#### Set config under $uclinux_path/linux-2.6.x folder.\n\n"

cd $uclinux_path/linux-2.6.x
sleep 3
 set timeout 2
      spawn ex .config
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/CONFIG_BFIN_KERNEL_CLOCK is not set\r"
      expect "CONFIG_BFIN_KERNEL_CLOCK is not set"
      send "d\r"
      sleep .5
      expect ":"
      send "i\r"
      sleep .5
      send "CONFIG_BFIN_KERNEL_CLOCK=y\r"
      send "CONFIG_VCO_MULT=20\r"
      send "CONFIG_CCLK_DIV=1\r"
      send "CONFIG_SCLK_DIV=8\r"
      send ".\r"
      expect ":"
      sleep .5    
      
      send "/CONFIG_BANK_3\[ =]\r"
      expect "CONFIG_BANK_3\[ =]"
      send "d\r"
      sleep .5
      expect ":"
      send "i\r"
      sleep .5
      send "CONFIG_BANK_3=0xFFC3\r"
      send ".\r"
      expect ":"
      sleep .5


      send "wq\r"
      expect eof

      
send_log "\n\n#### Set config under $uclinux_path/config folder.\n\n"

cd $uclinux_path/config
sleep 3
 set timeout 2
      spawn ex .config
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/CONFIG_USER_BUSYBOX_HDPARM\[ =]\r"
      expect "CONFIG_USER_BUSYBOX_HDPARM\[ =]"
      send "d\r"
      sleep .5
      expect ":"
      send "i\r"
      sleep .5
      send "CONFIG_USER_BUSYBOX_HDPARM=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_GET_IDENTITY=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_HDIO_SCAN_HWIF=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_HDIO_UNREGISTER_HWIF=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_HDIO_DRIVE_RESET=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_HDIO_TRISTATE_HWIF=y\r"
      send "CONFIG_USER_BUSYBOX_FEATURE_HDPARM_HDIO_GETSET_DMA=y\r"
      send ".\r"
      expect ":"
      sleep .5

      send "wq\r"
      expect eof


cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	     send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             send "y\r"
      }

           -re "ATA.ATAPI.MFM.RLL support.*IDE.*\\\[.*]" {
             send "Y\r"
      }

         -re "Enhanced IDE.MFM.RLL disk.cdrom.tape.floppy support.*BLK_DEV_IDE.*\\\[.*]" {
             send "Y\r"
      }

         -re "Include IDE.ATA-2 DISK support.*BLK_DEV_IDEDISK.*\\\[.*]" {
             send "Y\r"
      }

         -re "IDE Interface Address Mapping .*16-bit mapping for multimode CF Interface.*BFIN_IDE_ADDRESS_MAPPING_MODE1.*choice.*\\\[.*]" {
             send "2\r"
      }

          -re "IDE register base address.*BFIN_IDE_BASE.*\\\[.*]" {
             send "0x2031C020\r"
      }
          -re "IDE register alternate address.*BFIN_IDE_ALT.*\\\[.*]" {
             send "0x2031C01C\r"
      }
         -re "IDE IRQ no.*BFIN_IDE_IRQ.*\\\[.*]" {
             send "34\r"
      }

         -re "IDE IRQ PFx no.*BFIN_IDE_IRQ_PFX.*\\\[.*]" {
             send "4\r"
      }

        -re "Blackfin A.* used as CF A0.*BFIN_IDE_ADDRESS_AX.*\\\[.*]" {
             send "13\r"
      }


       -re "Address for enabling CF TRUE IDE MODE.*ATASEL.*CF_ATASEL_ENA.*\\\[.*]" {
             send "0x20311802\r"
      }

        -re "Address for disabling CF TRUE IDE MODE.*ATASEL.*CF_ATASEL_DIS.*\\\[.*]" {
             send "0x20311800\r"
      }

       
          -re "Bank 3.*\\\(BANK_3\\\).*\\\[.*]" {
             send -s "0xFFC3\r"
      }

         -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
             send -s "Y\r"
      }

      -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
             send "Y\r"
      }

      -re "VFAT.*Windows-95.*fs support.*VFAT_FS.*\\\[.*]" {
             send "Y\r"
      }

      -re "Default NLS Option.*NLS_DEFAULT.*\\\[.*]" {
             send "\r"
      }

        -re "Codepage 437.*United States.*Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
             send "Y\r"
      }

        -re "Codepage 850.*Europe.*NLS_CODEPAGE_850.*\\\[.*]" {
             send "Y\r"
      }
  
        -re "NLS ISO 8859-1.*Latin 1.*Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
             send "Y\r"
      }
        -re "fdisk.*CONFIG_USER_FDISK_FDISK.*\\\[.*]" {
             send "Y\r"
      }

       -re "mke2fs.*CONFIG_USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
             send "Y\r"
      }

#     -re "hdparm.*CONFIG_USER_BUSYBOX_HDPARM.*\\\[.*]" {
#             send "Y\r"
#      }
#
#       -re "hdparm. get identity.*CONFIG_USER_BUSYBOX_HDPARM_GET_IDENTITY.*\\\[.*]" {
#             send "Y\r"
#      }
#
#      -re "hdparm. scan hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_SCAN_HWIF.*\\\[.*]" {
#             send "Y\r"
#      }
#       -re "hdparm. unregister hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_UNREGISTER_HWIF.*\\\[.*]" {
#             send "Y\r"
#      }
#
#       -re "hdparm. drive reset.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_DRIVE_RESET.*\\\[.*]" {
#             send "Y\r"
#      }
#
#      -re "hdparm. tristate hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_TRISTATE_HWIF.*\\\[.*]" {
#             send "Y\r"
#      }
#
#      -re "hdparm. get.set dma.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_GETSET_DMA.*\\\[.*]" {
#             send "Y\r"
#      }

      
       "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
      }
   }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp


step "Make busybox clean."

cd $uclinux_path/user/busybox
spawn make clean
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
             "Entering directory" { }
             "Leaving directory" { set bfin_make_status success }
             "Error" {set bfin_make_status failure }
             "/bin/sh" { }
             eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"

}

cd $uclinux_path/testsuites

step "Make again."

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp
 
step "Make busybox clean."

cd $uclinux_path/user/busybox
spawn make clean
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
             "Entering directory" { }
             "Leaving directory" { set bfin_make_status success }
             "Error" {set bfin_make_status failure }
             "/bin/sh" { }
             eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"
}
send_user "Ending $argv0\n"
log_file
 


