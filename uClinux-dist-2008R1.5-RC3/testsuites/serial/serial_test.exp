#!/usr/bin/expect
#
#Test program to test the serial driver.
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set ttyBFdev /dev/ttyBF0
set file aaa

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start $TITLE"
set target_id $spawn_id

set case_num 0
incr case_num

send -s "stty -echo;cat \r"
set timeout 3
while 1 {
expect {
        -re  "$kernel_prompt" {
              case_fail $case_num
              exit 
        }

         timeout {
              break
         }
   }
}
set timeout 3
set this_case FAIL
spawn /bin/sh
while 1 {
expect {
       $sh_prompt {
       break
       }
       timeout {
       send_user "No prompt!\n"
       break
       }

}
}

set host_id $spawn_id 

for {set i 0} {$i<30} {incr i} {

set spawn_id $host_id
send  "echo $STRDATA > $ttydev \r"
while 1 {
expect {
       $sh_prompt {
       break
       } 
       timeout {
       send_user "No prompt!\n" 
       break
       }

}
}

set spawn_id $target_id
while 1 {
expect {
	"$STRDATA" {
              set this_case PASS 
              break
	}

         timeout {
                
                case_fail $case_num
		exit
         }
   }
}
}
if { $this_case == "PASS" } {
      case_pass $case_num

} else {
      case_fail $case_num
}

send -s "\3"
expect  -re  "$kernel_prompt" 

send "stty echo \r"
set timeout 3
while 1 {
expect {
        -re  "$kernel_prompt" {
              break
        }

         timeout {
              exit
         }
   }
}

incr case_num

set this_case FAIL

for {set i 0} {$i<30} {incr i} {

send  "$STRDATA\r"
while 1 {
expect {
        "$STRDATA" {
              set this_case PASS
              break
        }

         timeout {
                case_fail $case_num
                exit
         }
   }
}
}

if { $this_case == "PASS" } {
      case_pass $case_num

} else {
      case_fail $case_num
}


incr case_num
while 1 {
   set timeout 5
   send -s "ls\n"
   expect {
	"> " {
                case_pass $case_num
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "dmesg\n"
   send -s "dmesg\n"
   send -s "dmesg\n"
   send -s "cat proc/slabinfo\n"
   expect {
	"slabinfo - version" {
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

while 1 {
   expect {
	"> " {
                case_pass $case_num
		break
	}
         timeout {
                case_fail $case_num
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "cat proc/kallsyms\n"
   expect {
	"start" {
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

while 1 {
   sleep 1
   send -s "\3"
   expect {
	"> " {
                case_pass $case_num
		break
	}
         timeout {
                case_fail $case_num
		exit
         }
   }
}


incr case_num
set timeout 30
for {set i 0} {$i<100} {incr i} {
   send "$STRDATA\n"
}
send -s "====================================\n"

while 1 {
   expect {
	"=========: not found" {
                case_pass $case_num
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "vi\n"
   expect {
     -re  "1.*1" {
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

while 1 {
   set timeout 60
   send -s "i"
   send -s "adskf\n"
   send -s "werigji\n"
   send -s "werigji\n"
   send -s "werigji\n"
   send -s "werigji\n"
   send -s "werigji\n"
   send -s "werigji\n"
   for {set i 0} {$i<100} {incr i} {
      send -s "x"
      expect {
	"x" {
	}
         timeout {
                case_fail $case_num
		exit
         }
      }
   }
   send -s "a\n"
   send -s "b\n"
   send -s "c\n"
   send -s "d\n"
   send -s "e\n"
   send -s "f\n"
   send -s "\n"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA\n"
   for {set i 0} {$i<100} {incr i} {
      send "$STRDATA\n"
   }
   send -s "===================================#"
   expect {
	"#" {
		sleep 2
		send -s "\033"
		sleep 2
		send -s ":q!\n"
		sleep 2
		send -s "\n"
                case_pass $case_num
		break
	}

         timeout {
                case_fail $case_num
		exit
         }
   }
}

send_user "\n #######################################################################################################\n"
step "Reboot the kernel."
set bootargs             $bootargs_param9
source ../reboot_kernel.exp

incr case_num

    send -s "\x81"
    send -s "c"
    while 1 {
        expect {
            "ermit>" {
                set back_flag SUCCESS
                break
            }

            timeout {
                send_user "ERROR: back to kermit error\n"
                break
            }
        }
    }
    send -s "q\r"
    while 1 {
        expect {
            "Closing *OK" {
                set close_flag SUCCESS
                break
            }

            timeout {
                send_user "Close kermit error.\n"
                break
            }
        }
} 
set timeout 3
sleep 3
spawn  /bin/sh
set telnet_id $spawn_id
expect  $sh_prompt

send -s "telnet $targetip\r"
while 1 {
        expect {
                -re  "$kernel_prompt" { break  }
                timeout {
                      send_user "Failed inital telnet\n"
                      exit }
        }
}
send -s "stty -F $ttyBFdev ispeed $baud_rate ospeed $baud_rate \r"
while 1 {
        expect {
                -re  "$kernel_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}
send -s "cat $ttyBFdev  \r"
while 1 {
        expect {
                -re  "$kernel_prompt" {
                      break }
                timeout {
                      break }
        }
}


spawn /bin/sh
set host_sh_id $spawn_id
expect  $sh_prompt

while 1 {
send -s " echo $STRDATA > $ttydev  \r"
expect {
        "$sh_prompt" { 
          break }
         timeout {
          puts " send data failed...\n"
          break
         }
}
}

set spawn_id $telnet_id
send "\r"
while 1 {
expect {
        "$STRDATA" {
          case_pass $case_num
          send "\3"
          expect -re "$kernel_prompt"
          send_log "Echoed char get on host ." 
          break }
          timeout {
          send "\3"
          expect -re "$kernel_prompt"
          case_fail $case_num
          break
         }
}
}
incr case_num

set spawn_id $telnet_id
send -s "stty -F $ttyBFdev ispeed $baud_rate ospeed $baud_rate \r"
while 1 {
        expect {
                -re  "$kernel_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}
set spawn_id $host_sh_id
sleep 3
send "ls\r"
expect "$sh_prompt"
while 1 {
send -s "cat $ttydev > $file \r"
expect {
        "$sh_prompt" {
          puts "Fail to cat on host.\n"
          break }
         timeout {
          puts "wait for receiving data...\n"
          break
         }
}
}

set spawn_id $telnet_id
set timeout 10
while 1 {
send -s "cat /etc/boa.conf > $ttyBFdev \r"
        expect {
              -re  "$kernel_prompt" {
                      break }
                timeout { send_user "Failed inital telnet\n"
                        exit }
        }

}
set spawn_id $host_sh_id
sleep 3
while 1 {
expect {
        "$sh_prompt" {
          puts "Fail to wait.\n"
          break }
         timeout {
          puts "\nStill wait.\n"
          break
         }
}
}
send -s "\3"
while 1 {
expect {
        "$sh_prompt" {
          break }
         timeout {
          puts "Failed to come out.\n"
          break
         }
}
}
send -s "cat $file \r"
while 1 {
expect {
       "$sh_prompt" {
         break}
        timeout {
         puts "Failed to cat file.\n"}
}
}

send -s "dos2unix $file \r"
while 1 {
expect {
       "converting file" {
          puts "convert file.\n"
         break}
        timeout {
         puts "Failed to convert file.\n"}
}
}
expect {
       "$sh_prompt" {
          puts "finish dos2unix.\n"
        }
}

send -s "rcp root@$targetip:/etc/boa.conf . \r"
while 1 {
expect {
       "$sh_prompt" {
         puts "Copy file.\n"
         break}
        timeout {
         puts "Failed to copy file.\n"}
}
}

send -s "diff -u $file boa.conf \r"
while 1 {
expect {
         "\+\+\+*[
          ]$sh_prompt" {
                         puts "\nTwo files diffs. $expect_out(0,string)\n"
                         case_fail $case_num
                          }
          "$sh_prompt" 
                      {
                        puts "Success case.\n"
                        case_pass $case_num
                        break
                        }   
          "differ"
                      {
                         puts "Two files diffs.\n"
                         case_fail $case_num
                        }

          timeout 
                      {
                         puts "Fail to diff.\n"
                         case_fail $case_num
                        }   
         }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file

