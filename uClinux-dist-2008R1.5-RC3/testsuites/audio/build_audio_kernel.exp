#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp

if { $argc < 2} {
    puts "Please input: board_type, audio_dev"
    puts "audio_dev: audio_ad1836, audio_ad73311, audio_ad73322, audio_ad1980, audio_ad1981b, audio_ssm2602"
    exit
}

set audio_dev [lindex $argv 1]
set title build_$audio_dev
append title "_kernel_log"
log_file $title

send_user "Starting $argv0\n"
send_log "\n#### build kernel for $audio_dev\n"

cd $uclinux_path/testsuites

step "Make config"

source make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

while 1 {
    expect {
        -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
            send "$board_type\r"
        }

        -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
            send "y\r"
        }

        -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
            send "y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "n\r"
            } else {
                send "\r"
            }
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "y\r"
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "y\r"
        }

        -re "OSS PCM.*digital audio.*API.*SND_PCM_OSS\\\).*\\\[.*]" {
            send "y\r"
        }

        -re "AD1836 Audio support for BF53x.*SND_BLACKFIN_AD1836.*\\\[.*]" {
            if { $audio_dev == "audio_ad1836" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

        -re "AD73311L Audio support for BF53x.*SND_BFIN_AD73311.*\\\[.*]" {
            if { $audio_dev == "audio_ad73311" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            if { $audio_dev == "audio_ad73311" || $audio_dev == "audio_ad73322" || $audio_dev == "audio_ad1836" } {
                send "n\r"
            } else {
                send "y\r"
            }
        }

        -re "SoC Audio for the ADI BF5xx chip.*SND_BF5XX_SOC.*\\\[.*]" {
            send "y\r"
        }

        -re "SoC AC97 Audio support for BF548 ezkit.*SND_BF5XX_SOC_BF548_EZKIT.*\\\[.*]" {
            if { $audio_dev == "audio_ad1980" && $board_type == "BF548-EZKIT" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

        -re "DMA has priority over core for ext. accesses.*DEB_DMA_URGENT.*\\\[.*]" {
            if { $audio_dev == "audio_ad1980" && $board_type == "BF548-EZKIT" } {
                send "y\r"
            } else {
                send "\r"
            }
        }

        -re "SoC AC97 Audio support for BF5xx.*SND_BF5XX_SOC_BF5xx.*\\\[.*]" {
            if { $audio_dev == "audio_ad1981b" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

        -re "SoC SSM2602 Audio support for BF52x ezkit.*SND_BF5XX_SOC_SSM2602.*\\\[.*]" {
            if { $audio_dev == "audio_ssm2602" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

#ad73322
        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            if { $audio_dev == "audio_ad73322" } {
                send "m\r"
            } else {
                send "\r"
            }
        }

        -re "Cascaded AD73322 Audio support for BF53x.*SND_BFIN_AD73322.*\\\[.*]" {
            if { $audio_dev == "audio_ad73322" } {
                send "y\r"
            } else {
                send "n\r"
            }
        }

        -re "Blackfin Audio SPORT port.*SND_BFIN_SPORT.*\\\[.*]" {
            if { $audio_dev == "audio_ad73322" } {
                send "2\r"
            } else {
                send "\r"
            }
        }

        -re "Uncached SDRAM region.*Enable 2M DMA region.*DMA_UNCACHED_2M.*\[cC]hoice\\\[.*]:" {
            if { $board_type == "BF537-STAMP" } {
                send "1\r"
            } else {
                send "\r"
            }
        }

#Disable usb related drivers
        -re "Support for Host-side USB \\\(USB\\\).*\\\[.*]" {
            send "n\r"
        }

        -re "USB Human Interface Device \\\(full HID\\\) support.*USB_HID.*\\\[.*]" {
            send "n\r"
        }

#user tool config
        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "FDPIC\r"
        }

        -re "ALSA utils.*USER_ALSA_UTILS.*\\\[.*]" {
            send "y\r"
        }

        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
            send "y\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "y\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "y\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp

send_user "Ending $argv0\n"
log_file
