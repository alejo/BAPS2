#!/usr/bin/expect

#
# Build Kernel for both Konqueror and QT test
# QT kernel must be built before build konqueror source
#

source ../kernel_config.exp
source  ../board_info.exp
source  config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"


if { $argc == 2 } {
    set build_opt [lindex $argv 1]
    send_user "\n#### Blackfin build Option is $build_opt\n"
} else {
    puts "Please input board_type and build option:"
    puts "1: Static FLAT; 2: FDPIC"
    exit
}

if { $build_opt == 1 } {
    set build_type FLAT
} elseif { $build_opt == 2 } {
    set build_type FDPIC
}

puts "#### Make sure qt-embedded-free-$qt_ver is generated by build_qt_source.exp\n"
set QT_WORK_PATH "$QT_PATH.$build_type"
cd $QT_WORK_PATH


step "Change config file in /vender folder."
cd $uclinux_path
set timeout 2
spawn ex vendors/AnalogDevices/$board_type/Makefile
expect {
    "Entering Ex mode*Normal mode." { }

    "already exists!" {
        send "e\r"
        sleep 1
    }
}
sleep 1
send "/BLOCKS\r"
expect "BLOCKS*="
send "d\r"
expect ":"
send "i\r"
send "BLOCKS = 16384\r"
send ".\r"
expect ":"
send "wq\r"
expect eof


step "Make config."
cd $uclinux_path/testsuites
source  make_default_config.exp

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#TFT-LCD is used to test QT. Other video module can also be used.
#TFT-LCD driver is different for different boards.
#So all video related dirvers are built as modules.
#In fact we can also directly use kernels for LCD/ADV7393 test to test QT.
while 1 {
    expect {
        -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
            send "$board_type\r"
        }

        -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "n\r"
        }

#Video Output
        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            send "m\r"
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            send "y\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send "y\r"
        }

        -re "SHARP LQ035 TFT LCD on uClinux.*BF537 STAMP.*FB_BF537_LQ035.*\\\[.*]" {
            send "m\r"
        }

        -re "SHARP LQ043 TFT LCD.*BF548 EZKIT.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "m\r"
            } else {
                send "\r"
            }
        }

        -re "Varitronix COG-T350MCQB TFT LCD display.*FB_BFIN_T350MCQB.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" } {
                send "m\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin ADV7393 Video encoder on uClinux.*FB_BFIN_7393.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "m\r"
            } else {
                send "n\r"
            }
        }

#USB mouse
        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "y\r"
        }

        -re "Bank 3 \\\(BANK_3\\\).*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "0xAAC2\r"
            } else {
                send "\r"
            }
        }

        -re "ISP1362 HCD support.*USB_ISP1362_HCD.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "y\r"
            } else {
                send "\r"
            }
        }

        -re "GPIO for Interrupt.*USB_ISP1362_BFIN_GPIO_IRQ.*\\\[.*]" {
#For JP4 on usb add-on board, pin15 & 16 should be connected.
#PB4 on BF537-STAMP should be disabled.
            if { $board_type == "BF537-STAMP" } {
                send "55\r"
            } else {
                send "\r"
            }
        }

        -re "Inventra Highspeed Dual Role Controller.*USB_MUSB_HDRC.*\\\[./././.]" {
            if { $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT"} {
                send "y\r"
            } else {
                send "\r"
            }
        }

        -re "Disable DMA \\\(always use PIO\\\).*MUSB_PIO_ONLY.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT" } {
                send "y\r"
            } else {
                send "\r"
            }
        }

        -re "Using DMA polling in MUSB PIO mode.*MUSB_DMA_POLL.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT" } {
                send "y\r"
            } else {
                send "\r"
            }
        }

        -re "USB Human Interface Device \\\(full HID\\\) support.*USB_HID.*\\\[.*]" {
            send "y\r"
        }

        -re "Generic input layer.*needed for keyboard, mouse.*INPUT.*\\\[.*]" {
            send "y\r"
        }

        -re "Mouse interface.*INPUT_MOUSEDEV.*\\\[.*]" {
            send "y\r"
        }

        -re "Horizontal screen resolution.*INPUT_MOUSEDEV_SCREEN_X.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "480\r"
            } else {
                send "320\r"
            }
        }

        -re "Vertical screen resolution.*INPUT_MOUSEDEV_SCREEN_Y.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "272\r"
            } else {
                send "240\r"
            }
        }

        -re "Event interface.*INPUT_EVDEV.*\\\[.*]" {
            send "y\r"
        }

        -re "Keyboards.*INPUT_KEYBOARD.*\\\[.*]" {
            send "y\r"
        }

        -re "Mice.*INPUT_MOUSE.*\\\[.*]" {
            send "y\r"
        }

#Libs needed for konqueror: libZ, libpng and libjpeg. Default to be selected already.

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "$build_type\r"
        }

        -re "VIDEO test program.*CONFIG_USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
            send "y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

step "Make"
cd $uclinux_path/testsuites
source  make_kernel.exp

step "Generate kernel with QT"
cd $QT_WORK_PATH
exec mkdir -p $uclinux_path/romfs/usr/local
exec mkdir -p $uclinux_path/romfs/usr/local/qt-embedded
exec mkdir -p $uclinux_path/romfs/usr/local/qt-embedded/lib
exec mkdir -p $uclinux_path/romfs/usr/local/qt-embedded/lib/fonts
exec cp $QT_WORK_PATH/examples/drawlines/drawlines $uclinux_path/romfs
exec cp $QT_WORK_PATH/lib/fonts/fontdir $uclinux_path/romfs/usr/local/qt-embedded/lib/fonts/
exec cp $QT_WORK_PATH/lib/fonts/helvetica_100_50.qpf $uclinux_path/romfs/usr/local/qt-embedded/lib/fonts/
if { $build_opt == 2 } {
    exec cp $QT_WORK_PATH/lib/$qt_lib $uclinux_path/romfs/lib/
    cd $uclinux_path/romfs/lib/
    exec ln -sf $qt_lib libqte-mt.so.3.3
    exec ln -sf $qt_lib libqte-mt.so.3
    exec ln -sf $qt_lib libqte-mt.so
}
cd $uclinux_path/testsuites
source  make_kernel.exp

step "Copy linux"
cd $uclinux_path/testsuites
source   copy_image.exp

send_user "Ending $argv0\n"
log_file
